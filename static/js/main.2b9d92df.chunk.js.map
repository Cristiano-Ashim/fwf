{"version":3,"sources":["components/buttonComponent/Button.tsx","components/Options.tsx","components/FlagScore.tsx","components/Main.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Button","props","className","style","onClick","onClickCallback","name","Options","options","map","option","id","uid","button","document","querySelector","toString","correctUid","classList","remove","add","setTimeout","optionClickedCallback","correctButton","onClickHandler","FlagScore","src","code","alt","Main","useState","optionArray","setOptionArray","correctId","setCorrectId","correctCode","setCorrectCode","a","setA","score","setScore","attempts","setAttempts","allOptions","useEffect","fetch","headers","then","response","console","log","json","jsonData","item","length","temp","Math","floor","random","push","fisherYatesShuffle","updateOptions","initial","currentOptions","alert","getLast","index","c","array","i","num","pop","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2b9d92df.chunk.js","sourcesContent":["import './buttonStyles.css';\r\n\r\nexport interface ButtonProps {\r\n    onClickCallback: () => void;\r\n    name: string;\r\n    style?: string; //Can be 'red','green',or 'blue' -> Check styling file. Also has default color if prop is not provided.\r\n}\r\n\r\nconst Button = (props: ButtonProps) => {\r\n\r\n    let onClickHandler = () => {\r\n        props.onClickCallback();\r\n    }\r\n\r\n    let className = \"custom-button \" + props.style;\r\n    return (\r\n        <>\r\n            <button className={className}\r\n                onClick={onClickHandler}\r\n            >\r\n                {props.name}\r\n            </button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\nimport Button from './buttonComponent/Button';\r\n\r\nexport interface Option {\r\n    uid: number;\r\n    name: string;\r\n    code?: string;\r\n}\r\n\r\nexport interface OptionsProps {\r\n    options: Array<Option>;\r\n    correctUid: number;\r\n    optionClickedCallback: (correct:boolean) => void;\r\n}\r\n\r\nconst Options = (props: OptionsProps) => {\r\n    let count = 5;\r\n\r\n    const onClickHandler = (uid: number) => {\r\n        \r\n        //disable buttons after click\r\n        // let timer = setInterval(() => {\r\n        //     count--;\r\n        //     if (count == 0) {\r\n        //         clearInterval(timer);\r\n        //         count = 5;\r\n        //     }\r\n        //     const time = document.getElementById(\"timer\")!;\r\n        //     time.innerText = count.toString();\r\n        // }, 1000);\r\n        let button = document.querySelector(\"#a\" + uid.toString() + \" .custom-button\");\r\n        if (uid === props.correctUid && button) {\r\n            button.classList.remove(\"blue\");\r\n            button.classList.add(\"green\");\r\n            setTimeout(() => {\r\n                props.optionClickedCallback(true);\r\n            }, 4000);\r\n        } else if (button) {\r\n            button.classList.remove(\"blue\");\r\n            button.classList.add(\"red\");\r\n            let correctButton = document.querySelector(\"#a\" + props.correctUid.toString() + \" .custom-button\");\r\n            if (correctButton) {\r\n                correctButton.classList.remove(\"blue\");\r\n                correctButton.classList.add(\"green\");\r\n            }\r\n            setTimeout(() => {\r\n                props.optionClickedCallback(false);\r\n            }, 3000);\r\n        }\r\n\r\n    }\r\n    return (\r\n        <div className=\"options\">\r\n            \r\n            {\r\n                props.options.map((option) => (\r\n                    <div key={option.uid} className=\"buttonDiv\" id={\"a\"+option.uid}>\r\n                        <Button  style=\"blue\" name={option.name} onClickCallback={() => onClickHandler(option.uid)} />\r\n                    </div>\r\n                ))\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Options;","import { useState } from 'react';\r\n\r\ninterface Props {\r\n    code: string;\r\n}\r\nconst FlagScore = (props:Props) => {\r\n\r\n    let src = \"./../flags/\" + props.code + \".png\";\r\n    return (\r\n        <div className=\"flag\">\r\n            <img src={src} alt=\"\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FlagScore;","import { useEffect, useState} from 'react';\r\nimport Options, { Option } from './Options';\r\nimport FlagScore from './FlagScore';\r\n\r\nconst Main = () => {\r\n    const [optionArray, setOptionArray] = useState<Option[]>([]);\r\n    const [correctId, setCorrectId] = useState(0);\r\n    const [correctCode, setCorrectCode] = useState(\"\");\r\n    const [a, setA] = useState<Option[]>([]);\r\n    const [score, setScore] = useState(0);\r\n    const [attempts, setAttempts] = useState(-1);\r\n\r\n    let allOptions: Array<Option> = [];\r\n    // code to  fetch data for the first time, using useEffect to only run once!\r\n    useEffect(() => {\r\n        fetch('./filenames.json'\r\n            , {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json'\r\n                }\r\n            }\r\n        ).then((response) => {\r\n            console.log(response);\r\n            return response.json();\r\n        }).then((jsonData) => {\r\n            for (let item in jsonData) {\r\n                if (jsonData[item].length < 12) {\r\n                    let uid = Math.floor((Math.random() + 1) * 333);\r\n                    let temp: Option = {\r\n                        uid: uid,\r\n                        name: jsonData[item],\r\n                        code: item\r\n                    }\r\n                    allOptions.push(temp);\r\n                }\r\n            }\r\n            fisherYatesShuffle(allOptions);\r\n            setA(allOptions);\r\n            updateOptions(true);\r\n        })\r\n        \r\n    }, []);\r\n\r\n    const answeredCallback = (c: boolean) => {\r\n        if (c) {\r\n            console.log(\"correct\");\r\n            setScore(score + 1);\r\n        }\r\n        else console.log(\"Galat!\");\r\n        updateOptions(false);\r\n    }\r\n    const updateOptions = (initial: boolean) => {\r\n        if (attempts == 20) {\r\n            alert(\"That's the game!\");\r\n        }\r\n        let currentOptions: Array<any>;\r\n        if (initial) {\r\n            currentOptions = getLast(allOptions, 4);\r\n        } else {\r\n            currentOptions = getLast(a, 4);\r\n        }\r\n        if (currentOptions) {\r\n            setOptionArray([...currentOptions]);\r\n            let index = Math.floor(Math.random() * (3 - 0) + 0);\r\n            let uid = currentOptions[index].uid;\r\n            let code = currentOptions[index].code;\r\n            setCorrectId(uid);\r\n            setCorrectCode(code);\r\n            setAttempts(attempts + 1);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"main\">\r\n            <div className=\"stats\">\r\n                <p className=\"attempts\">Attempts :  {attempts}</p>\r\n                <p className=\"score\">Score : {score}</p>\r\n            </div>\r\n            <FlagScore code={correctCode} />\r\n            <Options options={optionArray} correctUid={correctId} optionClickedCallback={answeredCallback} />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Main;\r\n\r\nconst fisherYatesShuffle = (array: Array<any>) => {\r\n    if (array.length > 0) {\r\n        for (let i = 0; i < array.length; i++) {\r\n            let index = Math.floor(Math.random() * (array.length - 1 - i) + i);\r\n            let temp = array[i];\r\n            array[i] = array[index];\r\n            array[index] = temp;\r\n        }\r\n    }\r\n}\r\n\r\nconst getLast = (array: Array<any>, num: number) => {\r\n    let temp = [];\r\n    while (num > 0) {\r\n        temp.push(array.pop());\r\n        num--;\r\n    }\r\n    return temp;\r\n}\r\n\r\n","import React, {useEffect } from 'react';\nimport './App.css';\nimport Main from './components/Main';\n\n\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <br />\n      <br />\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}